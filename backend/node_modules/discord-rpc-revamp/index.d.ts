import { EventEmitter } from 'events';

interface RPCClientOptions {
    clientId: string;
    scopes?: string[];
}

interface Button {
    label: string;
    url: string;
}

interface Presence {
    state: string;
    details: string;
    startTimestamp?: number;
    endTimestamp?: number;
    largeImageKey?: string;
    largeImageText?: string;
    smallImageKey?: string;
    smallImageText?: string;
    partyId?: string;
    partySize?: number;
    partyMax?: number;
    matchSecret?: string;
    joinSecret?: string;
    spectateSecret?: string;
    instance?: boolean;
    buttons?: Button[];
}

interface Guild {
    id: string;
    name: string;
    icon_url: string;
    members: any[];
}

interface User {
    id: string;
    username: string;
    discriminator: string;
    global_name?: string;
    avatar?: string;
    avatar_decoration_data?: {
        asset: string;
        sku_id: string;
    };
    bot: boolean;
    flags: number;
    premium_type: number;
}

interface RPCConfig {
    cdn_host: string;
    api_endpoint: string;
    environment: string;
}

/**
 * Register the clientID as a deep link handler. (discord-{clientID}:// URIs)
 */
export let register: (clientID: string) => void;

export enum ErrorCode {
    //* Non-critical errors
    CAPTURE_SHORTCUT_ALREADY_LISTENING = 5004,
    GET_GUILD_TIMED_OUT = 5002,
    INVALID_ACTIVITY_JOIN_REQUEST = 4012,
    INVALID_ACTIVITY_SECRET = 5005,
    INVALID_CHANNEL = 4005,
    INVALID_COMMAND = 4002,
    INVALID_ENTITLEMENT = 4015,
    INVALID_EVENT = 4004,
    INVALID_GIFT_CODE = 4016,
    INVALID_GUILD = 4003,
    INVALID_INVITE = 4011,
    INVALID_LOBBY = 4013,
    INVALID_LOBBY_SECRET = 4014,
    INVALID_PAYLOAD = 4000,
    INVALID_PERMISSIONS = 4006,
    INVALID_TOKEN = 4009,
    INVALID_USER = 4010,
    LOBBY_FULL = 5007,
    NO_ELIGIBLE_ACTIVITY = 5006,
    OAUTH2_ERROR = 5000,
    PURCHASE_CANCELED = 5008,
    PURCHASE_ERROR = 5009,
    RATE_LIMITED = 5011,
    SELECT_CHANNEL_TIMED_OUT = 5001,
    SELECT_VOICE_FORCE_REQUIRED = 5003,
    SERVICE_UNAVAILABLE = 1001,
    TRANSACTION_ABORTED = 1002,
    UNAUTHORIZED_FOR_ACHIEVEMENT = 5010,
    UNKNOWN_ERROR = 1000,

    //* Critical errors
    CLOSE_NORMAL = 1000,
    CLOSE_UNSUPPORTED = 1003,
    CLOSE_ABNORMAL = 1006,
    INVALID_CLIENTID = 4000,
    INVALID_ORIGIN = 4001,
    RATELIMITED = 4002,
    TOKEN_REVOKED = 4003,
    INVALID_VERSION = 4004,
    INVALID_ENCODING = 4005,
}

export class Client extends EventEmitter {
    /**
     * Attempt to connect to discord.
     */
    connect: (opts: RPCClientOptions) => Promise<void>;
    /**
     * Subscribe to an event.
     */
    subscribe: (event: string) => void;
    /**
     * Unsubscribe from an event.
     */
    unsubscribe: (event: string) => void;
    /**
     * Authenticate with discord via an access token.
     */
    authenticate: (token: string) => Promise<void>;
    /**
     * The discord OAuth2 access token.
     */
    accessToken?: string;
    /**
     * The discord OAuth2 refresh token.
     */
    refreshToken?: string;
    /**
     * The discord OAuth2 expiry time.
     */
    tokenExpiresAt?: number;
    /**
     * Set the user's rich presence.
     */
    setActivity: (opts: Presence) => Promise<void>;
    /**
     * Clear the user's rich presence.
     */
    clearActivity: () => Promise<void>;
    /**
     * Get a guild.
     */
    getGuild: (guildId: string) => Promise<Guild>;
    /**
     * Destroy the client.
     */
    destroy: () => void;
    /**
     * The user that the client is connected as.
     */
    user?: User;
    /**
     * The client's RPC config.
     */
    config?: RPCConfig;
    /**
     * The scopes that the client is authenticated for.
     */
    scopes?: string[];
}
